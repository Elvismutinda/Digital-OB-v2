// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// enum UserRole {
//   Admin
//   Incharge
//   Police
//   Detective
// }

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  hashedPassword String?
  emailVerified  DateTime?
  image          String?
  staffId        String?   @unique
  rank           String?
  role           String
  gender         String?
  station        Station?  @relation(fields: [stationId], references: [id])
  stationId      String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  createdCases  Case[] @relation("CaseCreator")
  assignedCases Case[] @relation("CaseDetective")

  sessions Session[]
}

model Station {
  id         String   @id @default(cuid())
  name       String?
  county     String?
  sub_county String?
  contact    String?
  dateAdded  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  users User[]
  cases Case[]
}

model Complainant {
  id         String   @id @default(cuid())
  name       String?
  contact    String?
  occupation String?
  age        Int?
  address    String?
  gender     String?
  dateAdded  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  reportedCases Case[] @relation("CaseComplainant")
}

model Case {
  id         String    @id @default(cuid())
  ob_number  String
  crime      String?
  statement  String?
  status     String?   @default("Pending")
  dateAdded  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  dateClosed DateTime?
  report     String?

  creatorId String
  police    User   @relation("CaseCreator", fields: [creatorId], references: [id])

  detectiveId String?
  detective   User?   @relation("CaseDetective", fields: [detectiveId], references: [id], onDelete: SetNull)

  complainantId String
  complainant   Complainant @relation("CaseComplainant", fields: [complainantId], references: [id])

  stationId String
  station   Station @relation(fields: [stationId], references: [id], onDelete: Cascade)

  suspects Suspect[]

  @@index([creatorId])
  @@index([detectiveId])
  @@index([complainantId])
  @@index([stationId])
}

model Suspect {
  id          String   @id @default(cuid())
  name        String?
  description String?
  national_id String?
  age         Int?
  contact     String?
  gender      String?
  dateAdded   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  caseId String
  case   Case   @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@index([caseId])
}
